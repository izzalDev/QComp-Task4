#!/usr/bin/env python

import sys
import subprocess
import os
from venv import EnvBuilder
import re
from pathlib import Path

VENV_PATH = "venv"
REQUIREMENTS_FILE = "requirements.txt"

def create_environment(path: str = VENV_PATH, file: str = REQUIREMENTS_FILE):
    builder = EnvBuilder(with_pip=True)
    builder.create(path)
    activate_path = os.path.join(
        path,
        "Scripts" if os.name == "nt" else "bin",
        "activate"
    )
    install_requirements(path, file)
    os.system("cls" if os.name == "nt" else "clear")
    print(f"Virtual environment created at '{path}'")
    print(f"To activate it, run:\n\n  source {activate_path}" if os.name != "nt"
          else f"  {activate_path}\\activate.bat")

def install_requirements(path: str = VENV_PATH, file: str = REQUIREMENTS_FILE):
    python_exec = os.path.join(path, "Scripts" if os.name == "nt" else "bin", "python")
    if not os.path.exists(file):
        print(f"Requirements file '{file}' not found.")
        return
    subprocess.run([python_exec, "-m", "pip", "install", "-r", file], check=True)

def update_requirements(path: str = VENV_PATH, file: str = REQUIREMENTS_FILE):
    python_exec = os.path.join(path, "Scripts" if os.name == "nt" else "bin", "python")
    regex = "^\\s*([a-zA-Z0-9_-]+)"
    doc = Path(file).read_text().splitlines()
    packages = [m.group(1) for x in doc if (m := re.match(regex, x))]
    result = subprocess.run([python_exec, "-m", "pip", "install", "--upgrade"] + list(packages), check=True)
    if result.returncode:
        print("Error: Failed to update dependency")
        print("Rolling back dependency...")
        install_requirements(path, file)
    else:
        freeze = subprocess.run([python_exec, "-m", "pip", "freeze"], stdout = subprocess.PIPE, check=True, text=True)
        freeze = freeze.stdout.splitlines()
        updated_packages = [x for x in freeze if any(x.startswith(y + "==") for y in packages)]
        Path(file).write_text("\n".join(updated_packages) + "\n")
        Path(".python-version").write_text(f"{sys.version_info.major}.{sys.version_info.minor}")

def start_jupyterlab(path: str = VENV_PATH):
    python_exec = os.path.join(path, "Scripts" if os.name == "nt" else "bin", "python")
    subprocess.run([python_exec, "-m", "jupyter", "lab"])

if __name__ == "__main__":
    args = sys.argv[1:]  # exclude script name

    if not args:
        print("❌ No command provided. Use one of: install, update, jupyterlab.")
        sys.exit(1)

    if len(args) > 1:
        print("❌ Too many arguments. Use only one command like 'install', 'update', etc.")
        sys.exit(1)

    command = args[0].lower()

    match command:
        case "install":
            create_environment()
        case "update":
            update_requirements()
        case "jupyterlab":
            start_jupyterlab()
        case _:
            print(f"❌ Unknown command: '{command}'")
            sys.exit(1)
